# DOM CCTV MVP - Development Environment
# Docker Compose configuration for local development

version: '3.8'

services:
  # ============================================
  # MySQL Database
  # ============================================
  mysql:
    image: mysql:8.0
    container_name: dom_cctv_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password_dev}
      MYSQL_DATABASE: ${DB_NAME:-dom_cctv_mvp}
      MYSQL_USER: ${DB_USER:-dom_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-dev_password}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    volumes:
      # Persistent database storage
      - mysql_data:/var/lib/mysql
      # Custom MySQL configuration for Chilean timezone
      - ./config/mysql/my.cnf:/etc/mysql/conf.d/dom_cctv.cnf:ro
      # Initialization scripts
      - ./config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --default-time-zone='-03:00'
      --innodb-buffer-pool-size=256M
      --max-connections=100
    networks:
      - dom_cctv_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # ============================================
  # Redis Cache (Optional for production features)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: dom_cctv_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - dom_cctv_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s
      start_period: 10s

  # ============================================
  # Backend Development Container (Optional)
  # ============================================
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: backend-dev
    container_name: dom_cctv_backend_dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      DATABASE_URL: mysql://${DB_USER:-dom_user}:${DB_PASSWORD:-dev_password}@mysql:3306/${DB_NAME:-dom_cctv_mvp}?timezone=America/Santiago
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-development_secret_32_characters_long}
      PORT: 3001
      HOST: 0.0.0.0
      TZ: America/Santiago
    ports:
      - "3001:3001"
      - "9229:9229"  # Node.js debugger port
    volumes:
      # Source code for hot reload
      - ./backend/src:/app/src:delegated
      - ./backend/prisma:/app/prisma:delegated
      - ./backend/package.json:/app/package.json:ro
      - ./backend/tsconfig.json:/app/tsconfig.json:ro
      # Video uploads (persistent storage)
      - video_uploads:/app/uploads/videos
      - thumbnail_uploads:/app/uploads/thumbnails
      # Node modules cache
      - backend_node_modules:/app/node_modules
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dom_cctv_network
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # ============================================
  # Frontend Development Container (Optional)
  # ============================================
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: frontend-dev
    container_name: dom_cctv_frontend_dev
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api
      VITE_VIDEO_STREAM_URL: http://localhost:3001/uploads
      VITE_WS_URL: ws://localhost:3001
    ports:
      - "5173:5173"
    volumes:
      # Source code for hot reload
      - ./frontend/src:/app/src:delegated
      - ./frontend/public:/app/public:delegated
      - ./frontend/package.json:/app/package.json:ro
      - ./frontend/vite.config.ts:/app/vite.config.ts:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      # Node modules cache
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend-dev
    networks:
      - dom_cctv_network
    command: npm run dev -- --host 0.0.0.0

  # ============================================
  # Nginx Reverse Proxy (Production-like testing)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: dom_cctv_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/dom-cctv.conf:/etc/nginx/conf.d/default.conf:ro
      # SSL certificates (for HTTPS testing)
      - ./config/nginx/certs:/etc/nginx/certs:ro
      # Serve static files directly
      - video_uploads:/var/www/uploads/videos:ro
      - thumbnail_uploads:/var/www/uploads/thumbnails:ro
    depends_on:
      - backend-dev
      - frontend-dev
    networks:
      - dom_cctv_network
    profiles:
      - production-test

  # ============================================
  # Database Administration (Optional)
  # ============================================
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: dom_cctv_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ${DB_USER:-dom_user}
      PMA_PASSWORD: ${DB_PASSWORD:-dev_password}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password_dev}
    ports:
      - "8080:80"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - dom_cctv_network
    profiles:
      - admin

# ============================================
# Volumes for Persistent Data
# ============================================
volumes:
  # Database storage
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mysql

  # Cache storage
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

  # Application uploads
  video_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./uploads/videos

  thumbnail_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./uploads/thumbnails

  # Node modules caches
  backend_node_modules:
  frontend_node_modules:

# ============================================
# Network Configuration
# ============================================
networks:
  dom_cctv_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# ============================================
# Development Profiles
# ============================================
# Usage examples:
# 
# Start only database:
# docker-compose up mysql
#
# Start database + redis:
# docker-compose up mysql redis
#
# Start full development environment:
# docker-compose up mysql redis backend-dev frontend-dev
#
# Start with admin tools:
# docker-compose --profile admin up mysql phpmyadmin
#
# Start production-like testing:
# docker-compose --profile production-test up
#
# Stop all services:
# docker-compose down
#
# Reset all data (CAUTION):
# docker-compose down -v
# docker system prune -a